1.vp simulation:

class pendulum:
    def __init__(self,dt=0.04,theta0=0.2,F=0.5):
        self.dt=dt
        self.F=F
        self.f=2/3
        self.theta=theta0
        self.omega=0
        self.l=9.8
        self.g=9.8
        self.q=0.5
        self.ball=sphere(pos=(self.l*sin(theta0),5-self.l*cos(theta0),0),color=color.cyan,material=materials.emissive,radius=1)
        self.ceil=box(pos=(0,5,0),size=(5,0.5,2),material=materials.bricks)
        self.t=0
        self.rope=curve(pos=[self.ceil.pos,self.ball.pos],color=color.blue)
    def position(self):
        while True:
            rate(100)
            self.omega=self.omega-self.g/self.l*sin(self.theta)*self.dt-self.q*self.omega*self.dt+self.F*sin(self.f*self.t)*self.dt
            angle=self.theta+self.omega*self.dt
            while angle>pi:
                angle-=2*pi
            while angle<-pi:
                angle+=2*pi
            self.theta=angle
            self.ball.pos=(self.l*sin(self.theta),5-self.l*cos(self.theta),0)
            self.rope.pos=[self.ceil.pos,self.ball.pos]
            self.t+=self.dt



2.calculation:
class t:
    def __init__(self,dt=0.04,time_duration=300,q=0.5,ome_d=2/3,fd=1.2):
        self.steps=int(time_duration//dt+1)
        self.theta=[0.2]
        self.omega=[0]
        self.dt=dt
        self.t=[0]
        self.q=q
        self.fd=fd
        self.ome_d=ome_d
        self.del_=[0]
        self.lyap=[]
        self.t_del=[dt]
    def calculat(self):
        g=9.8
        l=9.8
        m=1
        for i in range(self.steps):
            self.omega.append(self.omega[i]-self.dt*(g/l*sin(self.theta[i])+self.q*self.omega[i]-self.fd*sin(self.ome_d*self.t[i])))
            theta_=self.theta[i]+self.dt*self.omega[i+1]
            while theta_>np.pi:
                theta_-=2*np.pi
            while theta_<-np.pi:
                theta_+=2*np.pi
            self.theta.append(theta_)
            self.t.append(self.t[i]+self.dt)
            self.del_.append(g/l*sin(self.theta[i]))
            self.lyap.append(1/self.t[i+1]*np.log(abs(self.del_[i+1])))
    def show_theta(self):
        fig=plt.figure()
        p1=fig.add_subplot(121)
        p1.plot(self.t,self.theta,'r')
        plt.xlabel('time')
        plt.ylabel('theta')
        plt.show()
    def show_del(self):
        fig=plt.figure()
        p2=fig.add_subplot(122)
        p2.plot(self.t,self.del_,'b')
        plt.xlabel('time')
        plt.ylabel('delta_theta')
        plt.show()
    def show_p(self):
        fig=plt.figure()
        p3=fig.add_subplot(111)
        p3.scatter(self.theta,self.omega)
        plt.xlabel('theta')
        plt.ylabel('omega')
        plt.show()
    def show_lyap(self):
        fig=plt.figure()
        p4=fig.add_subplot(111)
        nstep=self.steps-1
        for j in range(nstep):
            self.t_del.append(self.t_del[j]+self.dt)
        p4.set_ylim(-1,1)  
        p4.set_xlim(0,300)
        p4.plot(self.t_del,self.lyap)
        plt.show()
        

3.double pendulum:

class Pendulum:
    def __init__(self,
                 init_state = [180, 0, -10, 0],
                 L1=1.0,  
                 L2=1.0,  
                 M1=1.0,  
                 M2=1.0,  
                 G=9.8, 
                 origin=(0, 0)): 
        self.init_state = np.asarray(init_state, dtype='float')
        self.params = (L1, L2, M1, M2, G)
        self.origin = origin
        self.time_elapsed = 0

        self.state = self.init_state * np.pi / 180.
    
    def position(self):
        (L1, L2, M1, M2, G) = self.params

        x = np.cumsum([self.origin[0],
                       L1 * sin(self.state[0]),
                       L2 * sin(self.state[2])])
        y = np.cumsum([self.origin[1],
                       -L1 * cos(self.state[0]),
                       -L2 * cos(self.state[2])])
        return (x, y)

    def energy(self):
        (L1, L2, M1, M2, G) = self.params
        x = np.cumsum([L1 * sin(self.state[0]),
                       L2 * sin(self.state[2])])
        y = np.cumsum([-L1 * cos(self.state[0]),
                       -L2 * cos(self.state[2])])
        vx = np.cumsum([L1 * self.state[1] * cos(self.state[0]),
                        L2 * self.state[3] * cos(self.state[2])])
        vy = np.cumsum([L1 * self.state[1] * sin(self.state[0]),
                        L2 * self.state[3] * sin(self.state[2])])

        U = G * (M1 * y[0] + M2 * y[1])
        K = 0.5 * (M1 * np.dot(vx, vx) + M2 * np.dot(vy, vy))

        return U + K

    def dstate_dt(self, state, t):
        (M1, M2, L1, L2, G) = self.params

        dydx = np.zeros_like(state)
        dydx[0] = state[1]
        dydx[2] = state[3]

        cos_delta = cos(state[2] - state[0])
        sin_delta = sin(state[2] - state[0])

        den1 = (M1 + M2) * L1 - M2 * L1 * cos_delta * cos_delta
        dydx[1] = (M2 * L1 * state[1] * state[1] * sin_delta * cos_delta
                   + M2 * G * sin(state[2]) * cos_delta
                   + M2 * L2 * state[3] * state[3] * sin_delta
                   - (M1 + M2) * G * sin(state[0])) / den1

        den2 = (L2 / L1) * den1
        dydx[3] = (-M2 * L2 * state[3] * state[3] * sin_delta * cos_delta
                   + (M1 + M2) * G * sin(state[0]) * cos_delta
                   - (M1 + M2) * L1 * state[1] * state[1] * sin_delta
                   - (M1 + M2) * G * sin(state[2])) / den2
        
        return dydx

    def step(self, dt):
        "calculate time and do integrate"
        pass
pendulum = Pendulum([theta1,omega1,theta2,omega2])
dt = 1./50
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal', autoscale_on=False,
                     xlim=(-2, 2), ylim=(-2, 2))
ax.grid()
line, = ax.plot([], [], 'o-', lw=2)
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)
energy_text = ax.text(0.02, 0.90, '', transform=ax.transAxes)
def init():
    pass
def animate(i):
    pass
from time import time
t0 = time()
animate(0)
t1 = time()
interval = 1000 * dt - (t1 - t0)
ani = animation.FuncAnimation(fig, animate, frames,
                              interval, blit, init_func)

